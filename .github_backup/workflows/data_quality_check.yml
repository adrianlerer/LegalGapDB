name: Data Quality Check

on:
  schedule:
    # Run monthly on the 1st at 06:00 UTC
    - cron: '0 6 1 * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema requests pandas
    
    - name: Run comprehensive validation
      run: |
        echo "🔍 **Data Quality Report**" >> quality_report.md
        echo "" >> quality_report.md
        echo "Generated on: $(date)" >> quality_report.md
        echo "" >> quality_report.md
        
        # Count total cases
        total_cases=$(find cases -name "*.json" | wc -l)
        echo "📊 **Statistics:**" >> quality_report.md
        echo "- Total cases: $total_cases" >> quality_report.md
        
        # Count by jurisdiction
        for jurisdiction in cases/*/; do
          if [ -d "$jurisdiction" ]; then
            jur_name=$(basename "$jurisdiction")
            jur_count=$(find "$jurisdiction" -name "*.json" | wc -l)
            echo "- $jur_name: $jur_count cases" >> quality_report.md
          fi
        done
        
        echo "" >> quality_report.md
        echo "🔍 **Validation Results:**" >> quality_report.md
        echo "" >> quality_report.md
        
        # Validate all cases
        validation_passed=true
        for case_file in $(find cases -name "*.json"); do
          echo "Validating: $case_file"
          if ! python tools/validate_case.py "$case_file"; then
            echo "❌ Failed: $case_file" >> quality_report.md
            validation_passed=false
          fi
        done
        
        if [ "$validation_passed" = true ]; then
          echo "✅ All cases passed validation!" >> quality_report.md
        fi
        
        echo "" >> quality_report.md
        echo "🔗 **Citation Health Check:**" >> quality_report.md
        echo "" >> quality_report.md
        
        # Check for broken links (basic check)
        python -c "
import json
import requests
import glob
import sys
from urllib.parse import urlparse

broken_links = []
total_links = 0

for case_file in glob.glob('cases/**/*.json', recursive=True):
    with open(case_file, 'r', encoding='utf-8') as f:
        try:
            case_data = json.load(f)
            sources = case_data.get('metadata', {}).get('sources', [])
            
            for source in sources:
                if isinstance(source, dict) and 'url' in source:
                    url = source['url']
                    total_links += 1
                    
                    # Skip file:// and other non-http URLs
                    if not url.startswith(('http://', 'https://')):
                        continue
                    
                    try:
                        response = requests.head(url, timeout=10, allow_redirects=True)
                        if response.status_code >= 400:
                            broken_links.append((case_file, url, response.status_code))
                    except Exception as e:
                        broken_links.append((case_file, url, str(e)))
        except Exception as e:
            print(f'Error processing {case_file}: {e}')

print(f'📊 Checked {total_links} links')
if broken_links:
    print(f'⚠️ Found {len(broken_links)} potentially broken links:')
    for case_file, url, error in broken_links[:10]:  # Limit output
        print(f'  - {case_file}: {url} ({error})')
    if len(broken_links) > 10:
        print(f'  ... and {len(broken_links) - 10} more')
else:
    print('✅ All checked links appear to be working')
" >> quality_report.md
    
    - name: Create issue if problems found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality_report.md', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Data Quality Issues Detected',
            body: `${report}\n\n---\n\nThis issue was automatically created by the data quality check workflow.`,
            labels: ['data-quality', 'automated', 'needs-attention']
          });
    
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-report
        path: quality_report.md
    
    - name: Add to summary
      if: always()
      run: |
        cat quality_report.md >> $GITHUB_STEP_SUMMARY